#!/usr/bin/env python3

# Copyright (C) 2020-2022 Mathew R Gordon
# <https://github.com/mgord9518>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# VERSON 0.6.0
# This program is in early development and is very likely to have bugs
# and lack features. Push requests and constructive criticism always
# welcome!

# CHANGELOG:
# * Fixed image dialog to open in home directory
# * Removed need for `run.bash`
# * Large refactor of code

import json
import os
import sys
import time

from PyQt5           import uic
from PyQt5.QtCore    import *
from PyQt5.QtGui     import *
from PyQt5.QtWidgets import *

class CLI():
    def cmd_options(self):
        global default_settings
        global versionnum
        default_settings = False
        versionnum = "0.6.0"

        helptext = '''Usage: %s [OPTION]...
Configuration program for i3lock-color

  -h, --help            Show this help and exit
  -d, --defaults        Run %s with default settings
  -r, --run             Execute i3lock-color with the saved configuration
      --version         Show the version and exit
'''.format(length='multi-line', ordinal='second')%(2 * (sys.argv[0],))

        for option in sys.argv:
            if option == '-h' or option == '-help' or option == '--help':
                print(helptext)
                exit(0)
            elif option == '-r' or option == '-run' or option == '--run':
                self.run_command(self.get_config(), "")
                exit(0)
            elif option == '-d' or option == '-defaults' or option == '--defaults':
                default_settings = True
            elif option == '-version' or option == '--version':
                print("%s version: %s"%(sys.argv[0], versionnum))
                exit(0)
            elif not option == sys.argv[0]:
                print("%s: unrecognized option '%s'"%(sys.argv[0], option))
                print("Try '%s --help' for more information."%(sys.argv[0]))
                exit(1)

    # Find and process the config
    def run_command(self, config, args):
        config_dir = self.get_config_dir()

        command = "i3lock"

        blacklist = {"current_tab", "window_width", "window_height",
                     "bg_mode",     "bg_image",     "bg_screenshot",
                     "bg_color",    "bg_img_path",  "bg_mode_intensity",
                     "clock",       "force_clock",  "gb_image"}

        if config["bg_image"] and not config["bg_mode"] == "magickpixelate":
            command += " --image %s"%(config["image"])
        elif config["bg_screenshot"]:
            if config["bg_mode"] == "magickpixelate":
                command = 'R=$(xdpyinfo|sed -rn "/dimensions/s/^[^0-9]*([0-9]+x[0-9]+).*$/\\1/p");import -silent -window root bmp:-|convert bmp:- -scale %s%% -scale $R\\! rgb:-|i3lock --raw $R:rgb --image /dev/stdin --lock-text "" -c 00000000 '%(str(round(100 - config['bg_mode_intensity'] * 0.95)))

        for val in config:
            if val in blacklist:
                continue

            if val == "fork":
                if not config[val]:
                    command += " --nofork"
                continue

            if val == "unlock_indicator":
                if not config[val]:
                    command += " --no-unlock-indicator"
                continue

            if val == "indicator_radius":
                command += " --radius %s"%(config[val])
                continue

            if val == "blur":
                if not config["bg_screenshot"]:
                    continue
                command += " --blur %s"%(str(round(config['bg_mode_intensity'] / 10)))
                continue

            if val == "color":
                if not config["bg_color"]:
                    continue

            if config[val] == True:
                command += " --%s"%(val.replace("_", "-"))
            elif config[val] == False:
                continue
            else:
                if val == "image" and not config["bg_image"]:
                    continue

                command += " --%s '%s'"%(val.replace("_", "-"), config[val])


        if config["clock"]:
            command += " --clock"
            if config["force_clock"]:
                command += " --force-clock"

        command += args

        os.system(command)

        #exit(0)

    def get_config_dir(self):
        if os.path.isdir('%s/.config/i3lcc'%(os.environ['HOME'])):
            config_dir = '%s/.config/i3lcc'%(os.environ['HOME'])
        else:
            try:
                os.mkdir('%s/.config/i3lcc'%(os.environ['HOME']))
            except OSError as error:
                print("%s FATAL: %s"%(sys.argv[0], error))
                os.system("notify-send %s FATAL: %s"%(sys.argv[0], error))
                exit(1)
            config_dir = '%s/.config/i3lcc'%(os.environ['HOME'])
        return(config_dir)

    def get_config(self):
        config_dir = self.get_config_dir()
        if os.path.isfile('%s/config.json'%(config_dir)):
            config_file = '%s/config.json'%(config_dir)
            self.default_config_file = '../share/i3lcc/config.json'
        elif os.path.isfile('../share/i3lcc/config.json'):
            config_file = '../share/i3lcc/config.json'
            self.default_config_file = '../share/i3lcc/config.json'
        else:
            print("FATAL: No user config or default config file found!")
            exit(1)
	
        print("Loaded config: %s"%(config_file))
        with open(config_file, 'r') as json_object:
            config_data = json.load(json_object)
        return(config_data)

class MainWindow(QMainWindow):
    def __init__(self):
        global default_settings

        super(MainWindow, self).__init__()
        uic.loadUi('../share/i3lcc/i3lcc-qt5.ui', self)
        self.setWindowIcon(QIcon('../share/icons/locolor/scalable/apps/i3lcc.svg'))
        self.setWindowTitle("i3lock-color configuratorinator")

        # Get the config dictionary from the JSON config file
        self.configdict = cli.get_config()

        # Connect buttons to their respective functions
        self.tbtn_image.clicked.connect(self.image_picker)
        self.button_apply.clicked.connect(self.save_config)
        self.button_about.clicked.connect(self.about_dialog)
        self.button_quit.clicked.connect(self.quit)
        self.button_preview.clicked.connect(self.preview)
        self.button_default.clicked.connect(self.load_defaults)
        self.tabWidget.setCurrentIndex(self.configdict['current_tab'])
        self.resize(self.configdict['window_width'], self.configdict['window_height'])

        # Load defaults if enabled (the 'default_settings = False' line is to prevent recursion)
        if default_settings:
            default_settings = False
            self.load_defaults()
        else:
            self.init_widgets()

    def init_widgets(self):
        # Set the default image position to be in the corner, if checked otherwise, this will be overridden.
        self.corner.setChecked(True)
        self.bg_screenshot.clicked.connect(self.get_screenshot)
        self.bg_color.clicked.connect(self.get_background)
        # Restrict all color lineEdits to 6 char max, hexidecimal colors. This is done so they can easily be converted into color values
        validator = QRegExpValidator(QRegExp('[a-fA-F0-9]{0,8}'))
        # Set widgets to the correct values according to the config file
        for c in self.tabWidget.findChildren(QCheckBox):
            c.setChecked(self.configdict[c.objectName()])
        for r in self.tabWidget.findChildren(QRadioButton):
            r.setChecked(not r.objectName() == "corner" and self.configdict[r.objectName()])
        for g in self.tabWidget.findChildren(QGroupBox):
            if g.isCheckable() and self.configdict[g.objectName()]:
                g.setChecked(True)
            elif g.isCheckable():
                g.setChecked(False)
        for l in self.tabWidget.findChildren(QLineEdit):
            if "color" in l.objectName():
                l.setText(self.configdict[l.objectName()])
                l.setValidator(validator)
            elif "text" in l.objectName() or "str" in l.objectName() or l.objectName() == "image":
                l.setText(self.configdict[l.objectName()])

        self.combo_screenshot.currentIndexChanged.connect(self.update_info)
        self.bg_image.clicked.connect(self.update_info)

        # Background tab
        if self.configdict['bg_mode'] == 'i3lockblur':
            self.combo_screenshot.setCurrentIndex(0)
        elif self.configdict['bg_mode'] == 'magickpixelate':
            self.combo_screenshot.setCurrentIndex(1)

    # Func to call i3lock-color using all the flags provided
    def preview(self):
        self.update_info()
        self.configdict["ignore_empty_password"] = False

        cli.run_command(self.configdict, " --no-verify")

    def get_command(self):
        self.update_info()
#        return(self.command)

    # Update all vars by figuring out what GUI elements are switched on/off
    def update_info(self):
        # Define the command and the config dictionary, self.command will be the final shell command issued
        # the user. self.configdict will be converted to JSON and used to restore settings.
        self.configdict['current_tab'] = self.tabWidget.currentIndex()
        self.get_background()
        self.get_checkboxes()
        self.get_size()

    def get_screenshot(self):
        # Call the correct function depending on whether the user has selected the screenshot or color option
        self.bg_color.setChecked(False)
        self.configdict['bg_color'] = False
        self.configdict['bg_screenshot'] = True
        if self.combo_screenshot.currentIndex() == 0:
            # Re-enable the image option if this is selected
            self.bg_image.setEnabled(True)
#            self.command += '-c 00000000 -B %s '%(intensity)
            self.configdict['bg_mode'] = 'i3lockblur'
            self.configdict['bg_mode_intensity'] = self.bg_mode_intensity.value()
        elif self.combo_screenshot.currentIndex() == 1:
            # Disable the image option if this is selected; they aren't compatible
            self.bg_image.setEnabled(False)
            # Divide the spinbox value by 4, then take it from 30. This gives a good range of different pixelation values
            self.configdict['bg_mode'] = 'magickpixelate'
            self.configdict['bg_mode_intensity'] = self.bg_mode_intensity.value()

    def get_color(self): 
        for w in self.tabWidget.findChildren(QLineEdit):
            if "color" in w.objectName():
                # The color text box only allows hexidecimal chars, if the user inputs less than 8 chars, it will default to 00000000
                if len(w.text()) < 8:
                    w.setText('00000000')
                lineedit = w.objectName().replace("_", "-")
                self.configdict[lineedit] = w.text()
            elif "text" in w.objectName() or "str" in w.objectName():
                lineedit = w.objectName().replace("_", "-")
                self.configdict[lineedit] = w.text()
            elif w.objectName() == "image":
                lineedit = w.objectName()
                self.configdict[lineedit] = w.text()

    def get_background(self):
        # Set imageflag as empty in case the user doesn't supply any image, otherwise an error will occour
        path = self.image.text()
        self.configdict['tiling'] = False
        self.configdict['centered'] = False
        if self.centered.isChecked():
            imageflag = '--image "%s" -C '%(path)
            self.configdict['bg_img_path'] = path
            self.configdict['centered'] = True
        elif self.tiling.isChecked():
            imageflag = '--image "%s" -t '%(path)
            self.configdict['bg_img_path'] = path
            self.configdict['tiling'] = True
        else:
            imageflag = '--image "%s" '%(path)
            self.configdict['bg_img_path'] = path
        if self.bg_screenshot.isChecked() and not self.bg_color.isChecked():
            self.get_screenshot()
        elif self.bg_screenshot.isChecked() and self.bg_color.isChecked():
            self.bg_screenshot.setChecked(False)
            self.configdict['bg_screenshot'] = False
            self.configdict['bg_color'] = True
            self.bg_image.setEnabled(True)
        # Check if the image exists (and if the background image checkbox is enabled), if it is, add it to the command
        if self.bg_image.isChecked() and self.bg_image.isEnabled() and os.path.isfile(path):
            self.configdict['bg_image'] = True
        else:
            self.configdict['bg_image'] = False
        self.get_color()

    # Check which checkboxes are selected and set the i3lock-color flags accordingly
    def get_checkboxes(self):
        for w in self.tabWidget.findChildren(QCheckBox):
            flag = w.objectName().replace("_", "-")
            if w.isChecked():
                self.configdict[w.objectName()] = True
                if flag == 'pointer':
                    flag = 'pointer default'
                if flag == 'fork':
                    flag = ''
            else:
                self.configdict[w.objectName()] = False
                if flag == 'pointer':
                    flag = ''
                if flag == 'fork':
                    flag = 'no%s'%(flag)
                else:
                    flag = ''

        for w in self.tabWidget.findChildren(QGroupBox):
            flag = w.objectName().replace("_", "-")
            self.configdict[w.objectName()] = False
            # If the widget is any of these 3 options, ignore it because they aren't part of i3lock-color
            if flag == 'bg-color' or flag == 'bg-screenshot' or flag == 'bg-image':
                flag = ''
                if w.isChecked():
                    self.configdict[w.objectName()] = True
            elif w.isChecked() and flag == 'unlock-indicator':
                self.configdict[w.objectName()] = True
                flag = ''
            elif w.isChecked():
                self.configdict[w.objectName()] = True
            elif not w.isChecked() and flag == 'unlock-indicator':
                self.configdict[w.objectName()] = False
                flag = 'no-%s'%(flag)

    # Set the radius to the value set in the Radius spin box
    def get_size(self):
        radius    = str(self.spin_radius.value())
        ringwidth = str(self.spin_ringwidth.value())
        self.configdict['window_width'], self.configdict['window_height'] = self.width(), self.height()
        self.configdict['indicator_radius'] = radius
        self.configdict['ring_width'] = ringwidth

    def image_picker(self):
        image = QFileDialog.getOpenFileName(self, "Select image location", os.path.expanduser("~"), "Image files (*.png *.jpg *.bmp)")[0]
        self.image.setText(image)

    def save_config(self):
        self.update_info()
        config_dir = cli.get_config_dir()
        config_file = '%s/config.json'%(config_dir)
        try:
            f = open(config_file, 'w+')
        except OSError as error:
            print("%s FATAL: %s"%(sys.argv[0], error))
            os.system("notify-send %s FATAL: %s"%(sys.argv[0], error))

        json.dump(self.configdict, f, indent=2)
        f.close()

    def load_defaults(self):
        with open(cli.default_config_file, 'r') as json_object:
            self.configdict = json.load(json_object)
        self.init_widgets()
        print("Loaded default settings from: %s"%(cli.default_config_file))

    def about_dialog(self):
        about_dialog = QMessageBox()
        about_dialog.setText("i3lcc (i3lock-color configuratorintor)")
        about_dialog.setInformativeText("A simple program for configuring i3lock-color.\n\nCopyright (C) 2020-2021 Mathew R Gordon")
        about_dialog.exec_()

    def quit(self):
        app.quit()

if __name__=="__main__":
    fullpath = os.path.abspath(sys.argv[0])
    dirpath = os.path.dirname(fullpath)
    # Change directory to the program path so that i3lcc can find its files
    os.chdir(dirpath)
    cli = CLI()
    cli.cmd_options()
    app=QApplication(sys.argv)
    ex = MainWindow()
    ex.show()
    sys.exit(app.exec_())
